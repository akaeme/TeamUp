.. LocationsManager documentation master file, created by
   sphinx-quickstart on Thu Nov  2 17:16:21 2017.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to ``Locations Manager`` Service's documentation!
=================================================

Overview
-----
``Locations Manager`` API is a service that manage locations in a wide range of situations.
This document describes the protocol used to send data to the API and the returning response to the client.

Communication is done over HTTP using POST and GET methods. Both request and response are formatted as JSON,
and the content type of both is ``application/json``.

Events Manager Requests
-----
Events requests can assume multiple types according to the desired operation.
The request body must have JSON formatting. The request body also have JSON formatting.
All the ``POST/GET`` request parameters are appended to the Request Header body.
Only ``GET/POST/DELETE`` http request methods are allowed.

Resources
-----
The two main resources of this service are the Location, EventLocation and the Voting. Both export methods according to its context,
and there are a relation between ``API`` Resources and the ``HTTP`` Request methods. For instance, to get all the locations
associated to a event, as the verb says,  it must be done a ``HTTP`` Request ``get``, passing the user event_id.

Location Resource
-----
This resource provides a group of methods to handle all the operations related with locations, from the simplest to the
most complex, using generic and ``modular`` methods.

Resource Map::

    +---------------+---------------------+
    | HTTP  Methods |     API Methods     |
    +---------------+---------------------+
    |     GET       | * get Locations     |
    |               | * get Coordinates   |
    +---------------+---------------------+
    |     POST      | * create Location   |
    +---------------+---------------------+
    |    DELETE     | * delete Location   |
    +---------------+---------------------+

=================
Locations
=================
This call allows to get all information about all ``locations``::

    http://127.0.0.1:5004/locationManager/v1.0/location/getLocations

- Request Body
    The are no arguments. Any passed argument will be ignored.

- Response Body
    Returns a list of locations::

    {"location": [location_info]}

=================
Coordinates
=================
This call allows to get ``latitude and longitude`` associated to a specific location::

   http://127.0.0.1:5004/locationManager/v1.0/location/getCoords

- Request Body
    The only field is mandatory.

    :class:`location_id`
    - The id of an location.

- Response Body
    Returns coordinates for the specific location:

    {"location": [latitude,longitude]}

=================
Create Location
=================
This method allows to ``create`` an location::

     http://127.0.0.1:5004/locationManager/v1.0/location

- Request Body
    The following fields are allowed.

    :class:`name`
    - The location name.

    :class:`lat`
    - The latitude value of location coordinates.

    :class:`long`
    - The longitude value of location coordinates.

    :class:`city`
    - City name of the location.

    Example::

        { "name": "Universidade do Beja",
          "lat": "42,223",
          "long": "-8,456",
          "city": "Beja"}

- Response Body
    Returns an ack when the creation process succeeds::

    {u'ack': u'true'}


=================
Delete Location
=================
This method allows to ``delete`` an location previously created.::

    http://127.0.0.1:5004/locationManager/v1.0/location

- Request Body
    The only field is mandatory.

    :class:`location_id`
    - The id of an location.

- Request Body Example::

    {"location_id": location_id}
- Response Body
    Returns an ack when the creation process succeeds::

    {"ack": "true"}


EventLocation Resource
-----
This resource provides only one method to handle all the operations related with events.

Resource Map::

    +-------------------------------------+
    | HTTP  Methods |     API Methods     |
    +---------------+---------------------+
    |     POST      | * add EventLocation |
    +---------------+---------------------+

===================
Add EventLocation
===================
This method allows to ``create`` an event::

   'http://127.0.0.1:5004/locationManager/v1.0/Event_location

- Request Body
    The only field is mandatory.

    :class:`event_id`
    - The id of an event, it is generated by the service.


- Request Body Example::

    {"event_id": event_id}
- Response Body
    Returns an ack::

    {"ack": "true"}


Voting Resource
-----
This resource provides a group of methods to handle all the operations related with the process of vote and get the most voted location for a specific event.

Resource Map::

    +---------------+--------------------------+
    | HTTP  Methods |     API Methods          |
    +---------------+--------------------------+
    |     GET       | * get voted Location     |
    +---------------+--------------------------+
    |     POST      | * create vote Location   |
    +---------------+--------------------------+


===================
Voted Location
===================
This call allows to get ``the most voted location`` associated to a specific event::

   http://127.0.0.1:5004/locationManager/v1.0/voting

- Request Body
    The are no arguments. Any passed argument will be ignored.

- Response Body
    Returns coordinates and the ID for the most voted location.

    {"location": [latitude,longitude,location_ID,votes]}

===================
Voted Location
===================
This call allows to ``vote`` on a location for an event::

   http://127.0.0.1:5004/locationManager/v1.0/voting

- Request Body
   The following fields are allowed.

   :class:`event_id`
   - The Id of event.

   :class:`location_id`
   - The Id of location.

   :class:`vote`
   - Number of votes.

   Example::

      { "event_id":"3",
       "location_id": "4",
        "vote": "10 "}

- Response Body
    Returns an ack::

    {"ack": "true"}


Error Handling
-----
On all requests if an error occurs it is returned a json with the following format::

    {"error": errorType,
     "msg": message,
     "code": HTTP code}


The ``errorType``  refers to the entity/method that triggered the error and the ``message`` is a hint to understand the error.:


- ``Location`` - Internal database error performing an location query.

- ``AddLocation`` - Internal database error performing an location insert.

- ``DeleteLocation`` - Internal database error performing an location delete.

- ``AddEvent_location`` - Internal database error performing an event_location insert.

- ``Voting`` - Internal database error performing an voting query.

- ``AddVoting`` - Internal database error performing an voting insert.


Most common errors::

    +---------------+------------------------+
    | HTTP  Code    |      Description       |
    +---------------+------------------------+
    |     400       |  Bad Request           |
    +---------------+------------------------+
    |     403       |  Forbidden             |
    +---------------+------------------------+
    |     405       |  Method Not Allowed    |
    +---------------+------------------------+
    |     500       |  Internal Server Error |
    +---------------+------------------------+









